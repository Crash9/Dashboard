#pragma checksum "C:\Users\Roselia\Documents\GitHub\Dashboard\Views\Home\Index.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "2b74a6282d153608c8711d3bc8d918f0ecaf5f32"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCore.Views_Home_Index), @"mvc.1.0.view", @"/Views/Home/Index.cshtml")]
namespace AspNetCore
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
#nullable restore
#line 1 "C:\Users\Roselia\Documents\GitHub\Dashboard\Views\_ViewImports.cshtml"
using Dashboard;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "C:\Users\Roselia\Documents\GitHub\Dashboard\Views\_ViewImports.cshtml"
using Dashboard.Models;

#line default
#line hidden
#nullable disable
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"2b74a6282d153608c8711d3bc8d918f0ecaf5f32", @"/Views/Home/Index.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"ccb225a8b7775b6d65d4bc41cad2c9bd60636940", @"/Views/_ViewImports.cshtml")]
    public class Views_Home_Index : global::Microsoft.AspNetCore.Mvc.Razor.RazorPage<dynamic>
    {
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
#nullable restore
#line 1 "C:\Users\Roselia\Documents\GitHub\Dashboard\Views\Home\Index.cshtml"
  
    ViewData["Title"] = "Home Page";

#line default
#line hidden
#nullable disable
            WriteLiteral(@"
<div class=""row"">
    <div class=""col"">
        <div id=""foto-container"" class=""chart-container2"">
            <img id=""foto"" src=""https://picsum.photos/500/300""/>
            <a id=""botonCambioFoto"" class=""btn text-white"" title=""Hacer click para cambiar la imagen"" onclick=""cambiarImagen()"">Cambiar imagen</a>
        </div>
    </div>
    <div class=""col"">
        <div class=""chart-container2"">
            <center>
                <label for=""fecha-pago"">
                    Fecha de Pago
                </label>

                <input type=""text""
                        class=""form-control""
                        id=""fecha-pago""
                        style=""text-align: center;""
                        autofocus />
                <br />
            </center>
            <center>
                <input type=""text""
                        class=""form-control col-sm-4""
                        id=""fecha-pagos""
                        onchange=""actualizar();"" />
            </cente");
            WriteLiteral(@"r>
        </div>
    </div>
 </div>
<div class=""row mt-3"">
    <div class=""col"">
        <table id=""listados"" class=""table table-striped table-bordered"" style=""width:100%"" title=""Listado de personas"">
        <thead>
            <tr>
                <th>Nombre y Apellido</th>
                <th>DNI</th>
                <th>Domicilio</th>
                <th>País de origen</th>
            </tr>
        </thead>
        <tbody>
            <tr>
                <td>Alfreds Futterkiste</td>
                <td>123456789</td>
                <td>German Salvatore 321</td>
                <td>Italia</td>
            </tr>
             <tr>
                <td>Joan Marie Fretteux</td>
                <td>4556743459</td>
                <td>Mondeaux 45 3E</td>
                <td>Francia</td>
            </tr>
            <tr>
                <td>Juan Mauricio Benedetto</td>
                <td>175674369</td>
                <td>Paseo de la Juana 4888</td>
                <td>España<");
            WriteLiteral(@"/td>
            </tr>
            <tr>
                <td>Roxana Agatha Smith</td>
                <td>653454322</td>
                <td>John F. Kennedy 568</td>
                <td>Estados Unidos</td>
            </tr>
        </tbody>
        </table>
    </div>
</div>
<div class=""row mt-3"">
    <div class=""col"">
        <div class=""chart-container""> 
            <canvas id=""myChart""></canvas>
        </div>
    </div>
    <div class=""col"">
        <div class=""chart-container""> 
            <canvas id=""myChart2""></canvas>
        </div>
    </div>
    <div class=""col"">
        <div class=""chart-container middle""> 
            <canvas id=""myChart3""></canvas>
        </div>
    </div>
</div>
<div class=""row mt-3"">
    <div class=""col"">
        <div class=""chart-container2""> 
            <canvas id=""myChart4""></canvas>
        </div>
    </div>
    <div class=""col"">
        <div class=""chart-container2"">
            <canvas id=""line-chart""></canvas>
        </div>
    ");
            WriteLiteral(@"</div>
</div>
<script>
    $(document).ready(function () {
        $.datetimepicker.setLocale('es');
        $('#fecha-pagos').datetimepicker({
            format: 'd/m/Y H:i:s',
            lang: 'es',
            inline: true
        });

        $('#listados').DataTable({
            language: {
                url: '/js/datatable.spanish.json'
            }
        });
    });

    function actualizar() {
        setTimeout(
            function () {
                let fechaP = document.getElementById('fecha-pagos').value;
                document.getElementById('fecha-pago').value = fechaP;
            }, 100);
    }
    function cambiarImagen()
    {
        $('#foto').attr('src', '');
        $(""#foto"").attr(""src"",""https://picsum.photos/500/300/?random&rnd""+new Date().getTime());
    }
</script>
<script>
    const ctx = document.getElementById('myChart').getContext('2d');
    const ctx2 = document.getElementById('myChart2').getContext('2d');
    const ctx3 = document.");
            WriteLiteral(@"getElementById('myChart3').getContext('2d');
    const ctx4 = document.getElementById('myChart4').getContext('2d');

    const myChart = new Chart(ctx, {
        type: 'bar',
        data: {
            labels: ['Rojo', 'Azul', 'Amarillo', 'Verde', 'Púrpura', 'Naranja'],
            datasets: [{
                label: 'Número de votos',
                data: [12, 19, 3, 5, 2, 3],
                backgroundColor: [
                    'rgba(255, 99, 132, 0.2)',
                    'rgba(54, 162, 235, 0.2)',
                    'rgba(255, 206, 86, 0.2)',
                    'rgba(75, 192, 192, 0.2)',
                    'rgba(153, 102, 255, 0.2)',
                    'rgba(255, 159, 64, 0.2)'
                ],
                borderColor: [
                    'rgba(255, 99, 132, 1)',
                    'rgba(54, 162, 235, 1)',
                    'rgba(255, 206, 86, 1)',
                    'rgba(75, 192, 192, 1)',
                    'rgba(153, 102, 255, 1)',
                    'rgb");
            WriteLiteral(@"a(255, 159, 64, 1)'
                ],
                borderWidth: 1
            }]
        },
        options: {
            maintainAspectRatio: false,
            responsive: true,  
            scales: {
                y: {
                    beginAtZero: true
                }
            }
        }
    });
    const myChart2 = new Chart(ctx2, {
      type: 'pie',
      data: 
      { 
          labels: ['Rojo', 'Azul', 'Amarillo', 'Verde', 'Púrpura', 'Naranja'],
          datasets: [{
            label: 'Número de votos',
            data: [12, 19, 3, 5, 2, 3],
            backgroundColor: [
                  'rgba(255, 99, 132, 0.8)',
                  'rgba(54, 162, 235, 0.8)',
                  'rgba(255, 206, 86, 0.8)',
                  'rgba(75, 192, 192, 0.8)',
                  'rgba(153, 102, 255, 0.8)',
                  'rgba(255, 159, 64, 0.8)'
              ],
            hoverOffset: 4
          }]
     },options: {
        maintainAspectRatio: false,");
            WriteLiteral(@"
        responsive: true,  
     }
    });
    const myChart3 = new Chart(ctx3, {
      type: 'polarArea',
      data: 
      { 
          labels: [
            'Red',
            'Blue',
            'Yellow'
          ],
          datasets: [{
            label: 'My First Dataset',
            data: [300, 50, 100],
            backgroundColor: [
              'rgb(255, 99, 132)',
              'rgb(54, 162, 235)',
              'rgb(255, 205, 86)'
            ],
            hoverOffset: 4
          }]
     }, options: {
            maintainAspectRatio: false,
            responsive: true,
        }
    });
    const myChart4 = new Chart(ctx4, {
      type: 'bubble',
      data: 
      { 
          datasets: [{
            label: 'First Dataset',
            data: [{
                x: 20,
                y: 30,
                r: 15
            }, {
                x: 40,
                y: 10,
                r: 10
            }, {
                x: 10,
         ");
            WriteLiteral(@"       y: 20,
                r: 30
            }, {
                x: 20,
                y: 14,
                r: 10
            }],
            backgroundColor: 'rgb(255, 99, 132)'
            }]
     },options: {
        maintainAspectRatio: false,
        responsive: true,  
     }
    });
    new Chart(document.getElementById(""line-chart""), {
        type: 'line',
            data: {
                labels: [1500,1600,1700,1750,1800,1850,1900,1950,1999,2050],
                datasets: [{ 
                    data: [86,114,106,106,107,111,133,221,783,2478],
                    label: ""Africa"",
                    borderColor: ""#3e95cd"",
                    fill: false
                }, { 
                    data: [282,350,411,502,635,809,947,1402,3700,5267],
                    label: ""Asia"",
                    borderColor: ""#8e5ea2"",
                    fill: false
                }, { 
                    data: [168,170,178,190,203,276,408,547,675,734],
              ");
            WriteLiteral(@"      label: ""Europa"",
                    borderColor: ""#3cba9f"",
                    fill: false
                }, { 
                    data: [40,20,10,16,24,38,74,167,508,784],
                    label: ""Latinoamérica"",
                    borderColor: ""#e8c3b9"",
                    fill: false
                }, { 
                    data: [6,3,2,2,7,26,82,172,312,433],
                    label: ""Norteamérica"",
                    borderColor: ""#c45850"",
                    fill: false
                }
                ]
            },
            options: {
                maintainAspectRatio: false,
                responsive: true,
                title: {  
                text: 'Población mundial por región (en milliones)'
                }
            }
    });
</script>");
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<dynamic> Html { get; private set; }
    }
}
#pragma warning restore 1591
